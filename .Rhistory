}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
if(dim(suspects_structural_FP)[1] > 0) {
suspects_structural_FP <- suspects_structural_FP %>%
bind_rows(suspects_unidentified)
} else {
suspects_structural_FP <- suspects_unidentified
}
} else {
suspects_structural_FP = suspects_structural_FP %>%
bind_rows(suspects_unidentified)
}
fingerprints = path_suspects_sirius_project_folder
# 1) identify the suspects - candidate structures or only area and retention time?
suspects <- calibrants_suspects %>%
filter(is.na(conc_M))
suspects_with_candidate <- suspects %>%
drop_na(SMILES)
suspects_unidentified <- suspects %>%
filter(is.na(SMILES))
suspects_structural_FP = tibble()
## from structure
if (dim(suspects_with_candidate)[1] > 0) {
suspects_with_candidate <- descriptor_calc(suspects_with_candidate, type)
suppressMessages(
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup())
suspects_structural_FP <- suspects_with_candidate
}
## from SIRIUS results folder
if (fingerprints != "" & type != "PaDEL") {
if (is.character(fingerprints)){
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
#suspects_fingerprints_SIRIUS <- FpTableForPredictions(fingerprints)
} else {
suspects_fingerprints_SIRIUS <- fingerprints
}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
if(dim(suspects_structural_FP)[1] > 0) {
suspects_structural_FP <- suspects_structural_FP %>%
bind_rows(suspects_unidentified)
} else {
suspects_structural_FP <- suspects_unidentified
}
} else {
suspects_structural_FP = suspects_structural_FP %>%
bind_rows(suspects_unidentified)
}
(is.character(fingerprints))
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
invisible((suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))
remove.packages("MS2Quant")
devtools::install_github("kruvelab/MS2Quant",
ref="changing_models",
INSTALL_opts="--no-multiarch")
library(MS2Quant)
library(tidyverse)
# positive mode MS2Quant
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
ionization = "esi_pos"
calibrants_suspects = path_dataframe_calibrants_suspects
eluent = path_eluent_file
fingerprints = path_suspects_sirius_project_folder
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = "MS2Quant",
ionization,
path_suspects_sirius_project_folder)
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = "MS2Quant",
ionization,
path_suspects_sirius_project_folder)
calibrants_suspects
organic_modifier = "MeCN"
pH_aq = 2.7
NH4 = 0
model = "MS2Quant"
ionization = "esi_pos"
# Select the correct model for quantification; default: MS2Quant esi_pos
if (model == "model_PFAS" & ionization == "esi_neg") {
data_list_padel <- readRDS(system.file("model", "230619_logIE_model_withPFAS_allData.RData", package = "MS2Quant"))
#data_list_PFAS <- readRDS("inst/model/230619_logIE_model_withPFAS_allData.RData")
model_here = data_list_PFAS$model
type = "PaDEL"
} else if (model == "PaDEL" & ionization == "esi_pos") {
data_list_padel <- readRDS(system.file("model", "model_PaDEL_xgbTree_allData.RData", package = "MS2Quant"))
#data_list_padel <- readRDS("inst/model/model_PaDEL_xgbTree_allData.RData")
model_here = data_list_padel$model
type = "PaDEL"
} else if (model == "PaDEL" & ionization == "esi_neg") {
data_list_padel <- readRDS(system.file("model", "240903_neg_PaDEL_xgbTree_allData.RData", package = "MS2Quant"))
#data_list_padel <- readRDS("inst/model/240903_neg_PaDEL_xgbTree_allData.RData")
model_here = data_list_padel$model
type = "PaDEL"
} else if (model == "MS2Quant" & ionization == "esi_pos") {
data_list_sirius <- readRDS(system.file("model", "model_MS2Quant_xgbTree_allData.RData", package = "MS2Quant"))
model_here = data_list_sirius$model
type = "structural"
} else if (model == "MS2Quant" & ionization == "esi_neg") {
data_list_sirius <- readRDS(system.file("model", "240906_neg_SIRIUS_xgbTree_allData.RData", package = "MS2Quant"))
#data_list_sirius <- readRDS("inst/model/240906_neg_SIRIUS_xgbTree_allData.RData")
model_here = data_list_sirius$model
type = "structural"
} else {
print("Selected model or ionization mode not suitable")
return(NULL)
}
if (is.character(calibrants_suspects))
{
# read in dataframe with calibrants and suspects
calibrants_suspects <- read_delim(calibrants_suspects, show_col_types = FALSE)
}
View(calibrants_suspects)
# 1) Find calibration compounds with concentration and area information from the dataframe
calibrants <- calibrants_suspects %>%
drop_na(conc_M)
# 2) calculcate response factors (slopes of calibration graphs)
suppressMessages(
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
)
plot_calgraph <- ggplot() +
geom_point(data = calibrants,
mapping = aes(x = conc_M,
y = area_IC)) +
facet_wrap(~ identifier, scales = "free") +
theme_classic()
# 1) Use SMILES of calibrants to calculate structural fingerprints
calibrants_structural_FP <- descriptor_calc(calibrants, type)
# 2) Add eluent composition parameters
calibrants_structural_FP <- add_mobile_phase_composition(calibrants_structural_FP,
eluent = eluent,
organic_modifier = organic_modifier,
pH_aq = pH_aq,
NH4 = NH4)
if(model == "model_PFAS") {
calibrants_structural_FP = calibrants_structural_FP %>%
rename(pH.aq. = pH_aq)
}
# 3) Predict logIE values with MS2Quant for calibrants
calibrants_structural_FP <- calibrants_structural_FP %>%
mutate(pred_logIE = predict(model_here, newdata = calibrants_structural_FP))
# 4) Linear regression between logIE and logRF of calibrants
linmod_calibration <- lm(logRF ~ pred_logIE, data = calibrants_structural_FP)
calibration_plot = ggplot(data = calibrants_structural_FP) +
geom_point(mapping = aes(y = logRF,
x = pred_logIE),
size = 2,
alpha = 0.7,
color = "#515251") +
geom_abline(intercept = linmod_calibration$coefficients[1], slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]+1, slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]-1, slope = linmod_calibration$coefficients[2]) +
#ylim(c(11, 16)) +
#xlim(c(1, 5)) +
#annotation_logticks() +
xlab(substitute(paste("log", italic("IE"))["predicted"]))  +
ylab(substitute(paste("log", italic("RF"))["measured"])) +
theme_classic() +
theme(aspect.ratio = 1)
linmod_calibration_summary <- summary(linmod_calibration)
# 1) identify the suspects - candidate structures or only area and retention time?
suspects <- calibrants_suspects %>%
filter(is.na(conc_M))
suspects_with_candidate <- suspects %>%
drop_na(SMILES)
suspects_unidentified <- suspects %>%
filter(is.na(SMILES))
suspects_structural_FP = tibble()
## from structure
if (dim(suspects_with_candidate)[1] > 0) {
suspects_with_candidate <- descriptor_calc(suspects_with_candidate, type)
suppressMessages(
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup())
suspects_structural_FP <- suspects_with_candidate
}
suspects_with_candidate
View(suspects_with_candidate)
(fingerprints != "" & type != "PaDEL")
if (is.character(fingerprints)){
suspects_fingerprints_SIRIUS = new_readin_FP_function(fingerprints, printouts = FALSE)
#suspects_fingerprints_SIRIUS <- FpTableForPredictions(fingerprints)
} else {
suspects_fingerprints_SIRIUS <- fingerprints
}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
suspects_unidentified
suspects_fingerprints_SIRIUS
suspects_fingerprints_SIRIUS = new_readin_FP_function(fingerprints, printouts = FALSE)
suspects_fingerprints_SIRIUS
fingerprints
suspects_fingerprints_SIRIUS = new_readin_FP_function(fingerprints, printouts = FALSE)
suspects_fingerprints_SIRIUS = new_readin_FP_function(fingerprints, printouts = FALSE)
fingerprints
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
path_suspects_sirius_project_folder
original_wd = getwd()
original_wd
#uncompressing the compressed files - in case there has been any updates in SIRIUS project, good if it is done again so that compressed files are up to date
all_files_in_SIRIUS_folder <- list.files(path = folderwithSIRIUSfiles, full.names = TRUE, recursive = TRUE)
folderwithSIRIUSfiles = fingerprints
#uncompressing the compressed files - in case there has been any updates in SIRIUS project, good if it is done again so that compressed files are up to date
all_files_in_SIRIUS_folder <- list.files(path = folderwithSIRIUSfiles, full.names = TRUE, recursive = TRUE)
exts <- file_ext(all_files_in_SIRIUS_folder)
#uncompressing the compressed files - in case there has been any updates in SIRIUS project, good if it is done again so that compressed files are up to date
all_files_in_SIRIUS_folder <- list.files(path = folderwithSIRIUSfiles, full.names = TRUE, recursive = TRUE)
exts <- file_ext(all_files_in_SIRIUS_folder)
library(MS2Quant)
?file_ext
#uncompressing the compressed files - in case there has been any updates in SIRIUS project, good if it is done again so that compressed files are up to date
all_files_in_SIRIUS_folder <- list.files(path = folderwithSIRIUSfiles, full.names = TRUE, recursive = TRUE)
exts <- file_ext(all_files_in_SIRIUS_folder)
library(xfun)
exts <- file_ext(all_files_in_SIRIUS_folder)
all_dirs <- tibble(dirs = all_files_in_SIRIUS_folder,
exts = exts)
all_dirs <- all_dirs %>%
filter(exts == "")
if (length(all_dirs$dirs) > 0) {
if (all_files_uncompressed == FALSE) {
for (zipF in all_dirs$dirs){
outDir <- paste(zipF, "_uncompressed",
sep = "")
unzip(zipF, exdir = outDir)
}
}}
setwd(folderwithSIRIUSfiles)
# get dir to all features folders
all_dirs = list.dirs(path = folderwithSIRIUSfiles, full.names = F, recursive = FALSE)
# find common fingerprints of pos and neg mode
suppressMessages(
fp_names_pos <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid.tsv", sep = ""), delim = "\t", show_col_types = FALSE)$absoluteIndex, sep = "")
)
suppressMessages(
fp_names_neg <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid_neg.tsv", sep = "" ), delim = "\t", show_col_types = FALSE)$absoluteIndex, sep = "")
)
fp_names_common = intersect(fp_names_pos, fp_names_neg)
fingerprints_data_pos = tibble()
fingerprints_data_neg = tibble()
fingerprints_data = tibble()
if (printouts)  {
print(paste0("Found ", length(all_dirs), " SIRIUS folders", sep = " "))
}
ii = 1
printouts = F
if (printouts)  {
print(paste0("Found ", length(all_dirs), " SIRIUS folders", sep = " "))
}
ii = 1
##
for (dir in all_dirs) {
dir_files = list.files(dir)
formula_rank1 = ""
if ("fingerprints_uncompressed" %in% dir_files) {
dirs_FPs = list.files(paste0(dir, "/fingerprints_uncompressed", sep = ""), full.names = T)
if("formula_candidates.tsv" %in% dir_files) {
suppressMessages(
formula_candidates <- read_delim(paste0(dir, "/formula_candidates.tsv", sep = ""))
)
if(dim(formula_candidates)[1] > 0) {
formula_candidates = formula_candidates %>%
mutate(FP_exist = vapply(molecularFormula, function(x) any(grepl(x, dirs_FPs)), 1L)) %>%
filter(FP_exist == 1) %>%
filter(SiriusScore == max(SiriusScore))
formula_rank1 = formula_candidates$molecularFormula
if (length(formula_rank1) > 1) {
formula_rank1 = ""
}
}
}
}
if ("fingerprints_uncompressed" %in% dir_files & formula_rank1 != "") {
index_correct_formula_FP = grep(pattern = formula_rank1, dirs_FPs)
if (length(index_correct_formula_FP) == 1) {
dir_here = dirs_FPs[index_correct_formula_FP]
comp_name <- str_split(dir_here, "/")
folder_name = comp_name[[1]][1]
sir_fold <- as.numeric(str_split(folder_name, "_")[[1]][1])
id_this <- as.character(tail(str_split(folder_name, "_")[[1]], n=1)) # id is taken as the last element of the folder name after splitting the string by underscores
pred_ion <- as.character(sub("\\..*", "", comp_name[[1]][3]))
suppressMessages(
filedata <- read_delim(paste(folderwithSIRIUSfiles, dir_here, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
)
filedata <- as.data.frame(t(filedata))
filedata <- filedata %>%
mutate(predion = pred_ion,
id = id_this,
sir_fol_nr = sir_fold,
predform = as.character(sub("\\_.*", "", predion)))
# pos mode
if (grepl("]+", pred_ion, fixed=TRUE)) {
fingerprints_data_pos = fingerprints_data_pos %>%
bind_rows(filedata)
}
# neg mode
if (grepl("]-", pred_ion, fixed=TRUE)) {
fingerprints_data_neg = fingerprints_data_neg %>%
bind_rows(filedata)
}
}
}
ii = ii + 1
if (printouts)  {
print(paste0("file: ", ii, "; percentage: ",round(ii/length(all_dirs)*100), sep = ""))
}
}
if(nrow(fingerprints_data_pos) != 0){
colnames(fingerprints_data_pos) <- c(fp_names_pos, "predion", "id", "foldernumber", "predform")
fingerprints_data_pos = fingerprints_data_pos %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common))
fingerprints_data = fingerprints_data %>%
bind_rows(fingerprints_data_pos)
}
if(nrow(fingerprints_data_neg) != 0){
colnames(fingerprints_data_neg) <- c(fp_names_neg, "predion", "id", "foldernumber", "predform")
fingerprints_data_neg = fingerprints_data_neg %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common))
fingerprints_data = fingerprints_data %>%
bind_rows(fingerprints_data_neg)
}
if (printouts)  {
print("Done!")
}
setwd(original_wd)
original_wd
fingerprints_data
#uncompressing the compressed files - in case there has been any updates in SIRIUS project, good if it is done again so that compressed files are up to date
all_files_in_SIRIUS_folder <- list.files(path = folderwithSIRIUSfiles, full.names = TRUE, recursive = TRUE)
all_files_in_SIRIUS_folder
exts <- file_ext(all_files_in_SIRIUS_folder)
exts
all_dirs <- tibble(dirs = all_files_in_SIRIUS_folder,
exts = exts)
all_dirs <- all_dirs %>%
filter(exts == "")
if (all_files_uncompressed == FALSE) {
for (zipF in all_dirs$dirs){
outDir <- paste(zipF, "_uncompressed",
sep = "")
unzip(zipF, exdir = outDir)
}
}}
if (length(all_dirs$dirs) > 0) {
if (all_files_uncompressed == FALSE) {
for (zipF in all_dirs$dirs){
outDir <- paste(zipF, "_uncompressed",
sep = "")
unzip(zipF, exdir = outDir)
}
}}
all_files_uncompressed
all_files_uncompressed = FALSE
if (length(all_dirs$dirs) > 0) {
if (all_files_uncompressed == FALSE) {
for (zipF in all_dirs$dirs){
outDir <- paste(zipF, "_uncompressed",
sep = "")
unzip(zipF, exdir = outDir)
}
}}
setwd(folderwithSIRIUSfiles)
folderwithSIRIUSfiles
# get dir to all features folders
all_dirs = list.dirs(path = folderwithSIRIUSfiles, full.names = F, recursive = FALSE)
all_dirs
# find common fingerprints of pos and neg mode
suppressMessages(
fp_names_pos <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid.tsv", sep = ""), delim = "\t", show_col_types = FALSE)$absoluteIndex, sep = "")
)
suppressMessages(
fp_names_neg <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid_neg.tsv", sep = "" ), delim = "\t", show_col_types = FALSE)$absoluteIndex, sep = "")
)
fp_names_neg
fp_names_common = intersect(fp_names_pos, fp_names_neg)
fingerprints_data_pos = tibble()
fingerprints_data_neg = tibble()
fingerprints_data = tibble()
if (printouts)  {
print(paste0("Found ", length(all_dirs), " SIRIUS folders", sep = " "))
}
ii = 1
##
for (dir in all_dirs) {
dir_files = list.files(dir)
formula_rank1 = ""
if ("fingerprints_uncompressed" %in% dir_files) {
dirs_FPs = list.files(paste0(dir, "/fingerprints_uncompressed", sep = ""), full.names = T)
if("formula_candidates.tsv" %in% dir_files) {
suppressMessages(
formula_candidates <- read_delim(paste0(dir, "/formula_candidates.tsv", sep = ""))
)
if(dim(formula_candidates)[1] > 0) {
formula_candidates = formula_candidates %>%
mutate(FP_exist = vapply(molecularFormula, function(x) any(grepl(x, dirs_FPs)), 1L)) %>%
filter(FP_exist == 1) %>%
filter(SiriusScore == max(SiriusScore))
formula_rank1 = formula_candidates$molecularFormula
if (length(formula_rank1) > 1) {
formula_rank1 = ""
}
}
}
}
if ("fingerprints_uncompressed" %in% dir_files & formula_rank1 != "") {
index_correct_formula_FP = grep(pattern = formula_rank1, dirs_FPs)
if (length(index_correct_formula_FP) == 1) {
dir_here = dirs_FPs[index_correct_formula_FP]
comp_name <- str_split(dir_here, "/")
folder_name = comp_name[[1]][1]
sir_fold <- as.numeric(str_split(folder_name, "_")[[1]][1])
id_this <- as.character(tail(str_split(folder_name, "_")[[1]], n=1)) # id is taken as the last element of the folder name after splitting the string by underscores
pred_ion <- as.character(sub("\\..*", "", comp_name[[1]][3]))
suppressMessages(
filedata <- read_delim(paste(folderwithSIRIUSfiles, dir_here, sep = "/"), delim = " ", col_names = FALSE, show_col_types = FALSE)
)
filedata <- as.data.frame(t(filedata))
filedata <- filedata %>%
mutate(predion = pred_ion,
id = id_this,
sir_fol_nr = sir_fold,
predform = as.character(sub("\\_.*", "", predion)))
# pos mode
if (grepl("]+", pred_ion, fixed=TRUE)) {
fingerprints_data_pos = fingerprints_data_pos %>%
bind_rows(filedata)
}
# neg mode
if (grepl("]-", pred_ion, fixed=TRUE)) {
fingerprints_data_neg = fingerprints_data_neg %>%
bind_rows(filedata)
}
}
}
ii = ii + 1
if (printouts)  {
print(paste0("file: ", ii, "; percentage: ",round(ii/length(all_dirs)*100), sep = ""))
}
}
fingerprints_data_pos
all_dirs
dir = all_dirs[1]
dir_files = list.files(dir)
dir_files
formula_rank1 = ""
("fingerprints_uncompressed" %in% dir_files)
"fingerprints_uncompressed" %in% dir_files
all_dirs
#uncompressing the compressed files - in case there has been any updates in SIRIUS project, good if it is done again so that compressed files are up to date
all_files_in_SIRIUS_folder <- list.files(path = folderwithSIRIUSfiles, full.names = TRUE, recursive = TRUE)
exts <- file_ext(all_files_in_SIRIUS_folder)
all_dirs <- tibble(dirs = all_files_in_SIRIUS_folder,
exts = exts)
all_dirs
remove.packages("MS2Quant")
library(MS2Quant)
library(tidyverse)
# positive mode MS2Quant
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
devtools::install_github("kruvelab/MS2Quant",
ref="changing_models",
INSTALL_opts="--no-multiarch")
remove.packages("MS2Quant")
