geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = none())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = element_blank())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1)
?theme
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.key = element_blank())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = element_blank())
#write your code here
ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
#write your code here
regressor_recovery_logKow_relation = dataset %>%
lm(recovery ~ logKow_ACD)
#write your code here
regressor_recovery_logKow_relation = dataset %>%
lm(recovery ~ logKow_ACD,
data = .)
View(regressor_recovery_logKow_relation)
regressor_recovery_logKow_relation
regressor_recovery_logKow_relation %>%
summary()
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
?geom_abline
regressor_recovery_logKow_relation
regressor_recovery_logKow_relation$coefficients
regressor_recovery_logKow_relation$coefficients[2]
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1])
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red")
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5,
color = "blue")) +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5),
color = "blue") +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
#write your code here
correlation_plot = ggplot(data = dataset) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
correlation_plot
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1)
# write your code here
regressor_recovery_logKow_robust_relation = dataset %>%
MASS::rlm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_robust_relation
regressor_recovery_logKow_robust_relation
regressor_recovery_logKow_relation
regressor_recovery_logKow_robust_relation %>%
summary()
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1) +
geom_abline(slope = regressor_recovery_logKow_robust_relation$coefficients[2],
intercept = regressor_recovery_logKow_robust_relation$coefficients[1],
color = "green",
size = 1)
#write your code here
correlation_plot +
geom_abline(slope = regressor_recovery_logKow_relation$coefficients[2],
intercept = regressor_recovery_logKow_relation$coefficients[1],
color = "red",
size = 1) +
geom_abline(slope = regressor_recovery_logKow_robust_relation$coefficients[2],
intercept = regressor_recovery_logKow_robust_relation$coefficients[1],
color = "blue",
size = 1)
#write your code here
anova_test(regressor_recovery_logKow_robust_relation)
#write your code here
anova_test(regressor_recovery_logKow_robust_relation,
detailed = TRUE)
#write your code here
anova_test(regressor_recovery_logKow_robust_relation)
regressor_recovery_logKow_relation %>%
summary()
regressor_recovery_logKow_robust_relation
regressor_recovery_logKow_robust_relation %>%
summary()
# Write your code here
dataset_without_outliers = read_delim("Neale2018_SI_summary_without_outliers.csv")
View(dataset_without_outliers)
#write your code here
dataset_without_outliers = read_delim("Neale2018_SI_summary_without_outliers.csv",
delim = ",")
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none")
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none") +
ylim(0, 1.2)
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none") +
ylim(0, 1.5)
# Write your code here
ggplot(data = dataset_without_outliers) +
geom_point(mapping = aes(x = logKow_ACD,
y = recovery,
size = 1.5,
alpha = 0.5)) +
theme(aspect.ratio = 1,
legend.position = "none") +
ylim(0, 1.2)
#write your code here
regressor_recovery_logKow_without_outliers_relation = dataset_without_outliers %>%
lm(recovery ~ logKow_ACD,
data = .)
regressor_recovery_logKow_without_outliers_relation
regressor_recovery_logKow_without_outliers_relation %>%
summary()
MY_NEW_DATASET <- data.frame(
logKow_ACD = c(12, 19, 24)
)
View(MY_NEW_DATASET)
remove.packages("MS2Quant")
devtools::install_github("kruvelab/MS2Quant",
ref="main",
INSTALL_opts="--no-multiarch")
library(MS2Quant)
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
path_suspects_sirius_project_folder)
# Separate calibration plots for each calibrant
MS2Quant_quantification_results$calibrants_separate_plots
# Calibration plot between experimental logRF and logIE
MS2Quant_quantification_results$logIE_logRF_calibration_plot
# Summary of the linear model between logRF and logIE
MS2Quant_quantification_results$calibration_linear_model_summary
# All suspect concentrations
MS2Quant_quantification_results$suspects_concentrations
# Date when the quantification was done
MS2Quant_quantification_results$date
cal = tibble(SMILES = c("CCC", "CC"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 30)
cal = tibble(SMILES = c("CCC", "CC"))
library(tidyverse)
cal = tibble(SMILES = c("CCC", "CC"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 30)
View(IE_pred)
cal = tibble(SMILES = c("C=CCOC(CN1C=CN=C1)C2=C(C=C(C=C2)Cl)Cl.OS(=O)(=O)O", "CC(C)Cc1ccc(cc1)C(C)C(=O)O"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 30)
data = IE_pred$chemicals_predicted_IEs
View(data)
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 80)
data = IE_pred$chemicals_predicted_IEs
devtools::install_github("kruvelab/MS2Quant",
ref="main",
INSTALL_opts="--no-multiarch")
library(MS2Quant)
library(tidyverse)
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
path_suspects_sirius_project_folder)
View(isotopes)
View(MS2Quant_quantification_results)
MS2Quant_quantification_results$suspects_concentrations
cal = tibble(SMILES = c("C=CCOC(CN1C=CN=C1)C2=C(C=C(C=C2)Cl)Cl.OS(=O)(=O)O",
"CC(C)Cc1ccc(cc1)C(C)C(=O)O"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 80)
data = IE_pred$chemicals_predicted_IEs
View(data)
IE_pred = MS2Quant_predict_IE(path_dataframe_calibrants_suspects,)
IE_pred = MS2Quant_predict_IE(chemicals_for_IE_prediction = path_dataframe_calibrants_suspects,
eluent = path_eluent_file,
organic_modifier = "MeCN",
organic_percentage = 80,
pH_aq = 2.7,
fingerprints = path_suspects_sirius_project_folder)
data = IE_pred$chemicals_predicted_IEs
View(data)
cal = tibble(SMILES = c("CN1C=NC2=C1C(=O)N(C(=O)N2C)C",
"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"))
IE_pred = MS2Quant_predict_IE(cal, organic_percentage = 80)
data = IE_pred$chemicals_predicted_IEs
View(IE_pred)
remotes::install_github("kruvelab/MS2Tox", INSTALL_opts="--no-multiarch")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rdisop")
remotes::install_github("kruvelab/MS2Tox", INSTALL_opts="--no-multiarch")
devtools::install_github("kruvelab/MS2Quant",
ref="changing_models",
INSTALL_opts="--no-multiarch")
library(MS2Quant)
# positive mode MS2Quant
path_dataframe_calibrants_suspects <- system.file("example_data", "quantification_example.csv", package = "MS2Quant")
path_eluent_file <- system.file("example_data", "eluent.csv", package = "MS2Quant")
path_suspects_sirius_project_folder <- system.file("example_data", "SIRIUS_results", package = "MS2Quant")
ionization = "esi_pos"
MS2Quant_quantification_results <- MS2Quant_quantify(path_dataframe_calibrants_suspects,
path_eluent_file ,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = "MS2Quant",
ionization,
path_suspects_sirius_project_folder)
organic_modifier = "MeCN"
pH_aq = 2.7
NH4 = 0
model = "MS2Quant"
ionization = "esi_pos"
fingerprints = ""
calibrants_suspects
calibrants_suspects = path_dataframe_calibrants_suspects
eluent = path_eluent_file
fingerprints = ath_suspects_sirius_project_folder
# Select the correct model for quantification; default: MS2Quant esi_pos
if (model == "model_PFAS" & ionization == "esi_neg") {
data_list_padel <- readRDS(system.file("model", "230619_logIE_model_withPFAS_allData.RData", package = "MS2Quant"))
#data_list_PFAS <- readRDS("inst/model/230619_logIE_model_withPFAS_allData.RData")
model_here = data_list_PFAS$model
type = "PaDEL"
} else if (model == "PaDEL" & ionization == "esi_pos") {
data_list_padel <- readRDS(system.file("model", "model_PaDEL_xgbTree_allData.RData", package = "MS2Quant"))
#data_list_padel <- readRDS("inst/model/model_PaDEL_xgbTree_allData.RData")
model_here = data_list_padel$model
type = "PaDEL"
} else if (model == "PaDEL" & ionization == "esi_neg") {
data_list_padel <- readRDS(system.file("model", "240903_neg_PaDEL_xgbTree_allData.RData", package = "MS2Quant"))
#data_list_padel <- readRDS("inst/model/240903_neg_PaDEL_xgbTree_allData.RData")
model_here = data_list_padel$model
type = "PaDEL"
} else if (model == "MS2Quant" & ionization == "esi_pos") {
data_list_sirius <- readRDS(system.file("model", "model_MS2Quant_xgbTree_allData.RData", package = "MS2Quant"))
model_here = data_list_sirius$model
type = "structural"
} else if (model == "MS2Quant" & ionization == "esi_neg") {
data_list_sirius <- readRDS(system.file("model", "240906_neg_SIRIUS_xgbTree_allData.RData", package = "MS2Quant"))
#data_list_sirius <- readRDS("inst/model/240906_neg_SIRIUS_xgbTree_allData.RData")
model_here = data_list_sirius$model
type = "structural"
} else {
print("Selected model or ionization mode not suitable")
return(NULL)
}
if (is.character(calibrants_suspects))
{
# read in dataframe with calibrants and suspects
calibrants_suspects <- read_delim(calibrants_suspects, show_col_types = FALSE)
}
calibrants_suspects
is.character(calibrants_suspects)
if (is.character(calibrants_suspects))
{
# read in dataframe with calibrants and suspects
calibrants_suspects <- read_delim(calibrants_suspects, show_col_types = FALSE)
}
library(tidyverse)
if (is.character(calibrants_suspects))
{
# read in dataframe with calibrants and suspects
calibrants_suspects <- read_delim(calibrants_suspects, show_col_types = FALSE)
}
# 1) Find calibration compounds with concentration and area information from the dataframe
calibrants <- calibrants_suspects %>%
drop_na(conc_M)
# 2) calculcate response factors (slopes of calibration graphs)
suppressMessages(
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
)
plot_calgraph <- ggplot() +
geom_point(data = calibrants,
mapping = aes(x = conc_M,
y = area_IC)) +
facet_wrap(~ identifier, scales = "free") +
theme_classic()
# 1) Use SMILES of calibrants to calculate structural fingerprints
calibrants_structural_FP <- descriptor_calc(calibrants, type)
# 2) Add eluent composition parameters
calibrants_structural_FP <- add_mobile_phase_composition(calibrants_structural_FP,
eluent = eluent,
organic_modifier = organic_modifier,
pH_aq = pH_aq,
NH4 = NH4)
if(model == "model_PFAS") {
calibrants_structural_FP = calibrants_structural_FP %>%
rename(pH.aq. = pH_aq)
}
# 3) Predict logIE values with MS2Quant for calibrants
calibrants_structural_FP <- calibrants_structural_FP %>%
mutate(pred_logIE = predict(model_here, newdata = calibrants_structural_FP))
# 4) Linear regression between logIE and logRF of calibrants
linmod_calibration <- lm(logRF ~ pred_logIE, data = calibrants_structural_FP)
calibration_plot = ggplot(data = calibrants_structural_FP) +
geom_point(mapping = aes(y = logRF,
x = pred_logIE),
size = 2,
alpha = 0.7,
color = "#515251") +
geom_abline(intercept = linmod_calibration$coefficients[1], slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]+1, slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]-1, slope = linmod_calibration$coefficients[2]) +
#ylim(c(11, 16)) +
#xlim(c(1, 5)) +
#annotation_logticks() +
xlab(substitute(paste("log", italic("IE"))["predicted"]))  +
ylab(substitute(paste("log", italic("RF"))["measured"])) +
theme_classic() +
theme(aspect.ratio = 1)
linmod_calibration_summary <- summary(linmod_calibration)
# 1) identify the suspects - candidate structures or only area and retention time?
suspects <- calibrants_suspects %>%
filter(is.na(conc_M))
suspects_with_candidate <- suspects %>%
drop_na(SMILES)
suspects_unidentified <- suspects %>%
filter(is.na(SMILES))
suspects_structural_FP = tibble()
suspects_with_candidate
suspects_unidentified
suspects_structural_FP = tibble()
## from structure
if (dim(suspects_with_candidate)[1] > 0) {
suspects_with_candidate <- descriptor_calc(suspects_with_candidate, type)
suppressMessages(
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup())
suspects_structural_FP <- suspects_with_candidate
}
## from SIRIUS results folder
if (fingerprints != "" & type != "PaDEL") {
if (is.character(fingerprints)){
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
#suspects_fingerprints_SIRIUS <- FpTableForPredictions(fingerprints)
} else {
suspects_fingerprints_SIRIUS <- fingerprints
}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
if(dim(suspects_structural_FP)[1] > 0) {
suspects_structural_FP <- suspects_structural_FP %>%
bind_rows(suspects_unidentified)
} else {
suspects_structural_FP <- suspects_unidentified
}
} else {
suspects_structural_FP = suspects_structural_FP %>%
bind_rows(suspects_unidentified)
}
fingerprints = path_suspects_sirius_project_folder
# 1) identify the suspects - candidate structures or only area and retention time?
suspects <- calibrants_suspects %>%
filter(is.na(conc_M))
suspects_with_candidate <- suspects %>%
drop_na(SMILES)
suspects_unidentified <- suspects %>%
filter(is.na(SMILES))
suspects_structural_FP = tibble()
## from structure
if (dim(suspects_with_candidate)[1] > 0) {
suspects_with_candidate <- descriptor_calc(suspects_with_candidate, type)
suppressMessages(
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup())
suspects_structural_FP <- suspects_with_candidate
}
## from SIRIUS results folder
if (fingerprints != "" & type != "PaDEL") {
if (is.character(fingerprints)){
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
#suspects_fingerprints_SIRIUS <- FpTableForPredictions(fingerprints)
} else {
suspects_fingerprints_SIRIUS <- fingerprints
}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
if(dim(suspects_structural_FP)[1] > 0) {
suspects_structural_FP <- suspects_structural_FP %>%
bind_rows(suspects_unidentified)
} else {
suspects_structural_FP <- suspects_unidentified
}
} else {
suspects_structural_FP = suspects_structural_FP %>%
bind_rows(suspects_unidentified)
}
(is.character(fingerprints))
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
invisible((suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))
