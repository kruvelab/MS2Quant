calibrants <- calibrants_suspects %>%
drop_na(conc_M)
# 2) calculcate response factors (slopes of calibration graphs)
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
plot_calgraph <- ggplot() +
geom_point(data = calibrants,
mapping = aes(x = conc_M,
y = area_IC)) +
facet_wrap(~ identifier, scales = "free") +
theme_classic()
# 1) Use SMILES of calibrants to calculate structural fingerprints
calibrants_structural_FP <- descriptor_calc(calibrants, type)
# 2) Add eluent composition parameters
calibrants_structural_FP <- add_mobile_phase_composition(calibrants_structural_FP,
eluent = eluent,
organic_modifier = organic_modifier,
pH_aq = pH_aq,
NH4 = NH4)
if(model == "model_PFAS") {
calibrants_structural_FP = calibrants_structural_FP %>%
rename(pH.aq. = pH_aq)
}
# 3) Predict logIE values with MS2Quant for calibrants
calibrants_structural_FP <- calibrants_structural_FP %>%
mutate(pred_logIE = predict(model_here, newdata = calibrants_structural_FP))
# 4) Linear regression between logIE and logRF of calibrants
linmod_calibration <- lm(logRF ~ pred_logIE, data = calibrants_structural_FP)
calibration_plot = ggplot(data = calibrants_structural_FP) +
geom_point(mapping = aes(y = logRF,
x = pred_logIE),
size = 2,
alpha = 0.7,
color = "#515251") +
geom_abline(intercept = linmod_calibration$coefficients[1], slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]+1, slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]-1, slope = linmod_calibration$coefficients[2]) +
#ylim(c(11, 16)) +
#xlim(c(1, 5)) +
#annotation_logticks() +
xlab(substitute(paste("log", italic("IE"))["predicted"]))  +
ylab(substitute(paste("log", italic("RF"))["measured"])) +
theme_classic() +
theme(aspect.ratio = 1)
linmod_calibration_summary <- summary(linmod_calibration)
#************
# SUSPECTS
#************
# 1) identify the suspects - candidate structures or only area and retention time?
suspects <- calibrants_suspects %>%
filter(is.na(conc_M))
suspects_with_candidate <- suspects %>%
drop_na(SMILES)
suspects_unidentified <- suspects %>%
filter(is.na(SMILES))
# 1) Get fingerprints for suspects
suspects_structural_FP = tibble()
## from structure
if (dim(suspects_with_candidate)[1] > 0) {
suspects_with_candidate <- descriptor_calc(suspects_with_candidate, type)
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup()
suspects_structural_FP <- suspects_with_candidate
}
## from SIRIUS results folder
if (fingerprints != "" & type != "PaDEL") {
if (is.character(fingerprints)){
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
#suspects_fingerprints_SIRIUS <- FpTableForPredictions(fingerprints)
} else {
suspects_fingerprints_SIRIUS <- fingerprints
}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
if(dim(suspects_structural_FP)[1] > 0) {
suspects_structural_FP <- suspects_structural_FP %>%
bind_rows(suspects_unidentified)
} else {
suspects_structural_FP <- suspects_unidentified
}
} else {
suspects_structural_FP = suspects_structural_FP %>%
bind_rows(suspects_unidentified)
}
# 2) Add eluent composition parameters
suspects_structural_FP <- add_mobile_phase_composition(suspects_structural_FP,
eluent = eluent,
organic_modifier = organic_modifier,
pH_aq = pH_aq,
NH4 = NH4)
# 3) Predict logIE values with MS2Quant for suspects
if(model == "model_PFAS") {
suspects_structural_FP = suspects_structural_FP %>%
rename(pH.aq. = pH_aq)
}
suspects_structural_FP <- suspects_structural_FP %>%
mutate(pred_logIE = predict(model_here, newdata = suspects_structural_FP))
# 4) Convert logIE to logRF values
suspects_structural_FP <- suspects_structural_FP %>%
mutate(logRF_pred = pred_logIE*linmod_calibration$coefficients[2] + linmod_calibration$coefficients[1])
# 5) Calculate concentrations using integrated areas
suspects_concentrations <- suspects_structural_FP %>%
mutate(conc_M = area*IC/10^logRF_pred) %>%
select(identifier, SMILES, area, retention_time, conc_M, logRF_pred)
data_list <-list("calibrants_separate_plots" = plot_calgraph,
"logIE_logRF_calibration_plot" = calibration_plot,
"calibration_linear_model_summary" = linmod_calibration_summary,
"suspects_concentrations" = suspects_concentrations,
"date" = Sys.Date())
return(data_list)
}
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant
# 2) calculcate response factors (slopes of calibration graphs)
suppressWarnings(
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
)
calibrants
# 1) Find calibration compounds with concentration and area information from the dataframe
calibrants <- calibrants_suspects %>%
drop_na(conc_M)
# read in dataframe with calibrants and suspects
calibrants_suspects <- read_delim(calibrants_suspects, show_col_types = FALSE)
# 1) Find calibration compounds with concentration and area information from the dataframe
calibrants <- calibrants_suspects %>%
drop_na(conc_M)
# 2) calculcate response factors (slopes of calibration graphs)
suppressWarnings(
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
)
# 2) calculcate response factors (slopes of calibration graphs)
suppressMessages(
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
)
suppressMessages(
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup())
#' @export
MS2Quant_quantify <- function(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = "MS2Quant",
ionization = "esi_pos",
fingerprints = ""){
# Select the correct model for quantification; default: MS2Quant esi_pos
if (model == "model_PFAS" & ionization == "esi_neg") {
data_list_PFAS <- readRDS("inst/model/230619_logIE_model_withPFAS_allData.RData")
model_here = data_list_PFAS$model
type = "PaDEL"
} else if (model == "PaDEL" & ionization == "esi_pos") {
#data_list_padel <- readRDS(system.file("model", "model_PaDEL_xgbTree_allData.RData", package = "MS2Quant"))
data_list_padel <- readRDS("inst/model/model_PaDEL_xgbTree_allData.RData")
model_here = data_list_padel$model
type = "PaDEL"
} else if (model == "PaDEL" & ionization == "esi_neg") {
#data_list_padel <- readRDS(system.file("model", "240903_neg_PaDEL_xgbTree_allData", package = "MS2Quant"))
data_list_padel <- readRDS("inst/model/240903_neg_PaDEL_xgbTree_allData.RData")
model_here = data_list_padel$model
type = "PaDEL"
} else if (model == "MS2Quant" & ionization == "esi_pos") {
data_list_sirius <- readRDS(system.file("model", "model_MS2Quant_xgbTree_allData.RData", package = "MS2Quant"))
model_here = data_list_sirius$model
type = "structural"
} else if (model == "MS2Quant" & ionization == "esi_neg") {
#data_list_sirius <- readRDS(system.file("model", "240906_neg_SIRIUS_xgbTree_allData", package = "MS2Quant"))
data_list_sirius <- readRDS("inst/model/240906_neg_SIRIUS_xgbTree_allData.RData")
model_here = data_list_sirius$model
type = "structural"
} else {
print("Selected model or ionization mode not suitable")
return(NULL)
}
if (is.character(calibrants_suspects))
{
# read in dataframe with calibrants and suspects
calibrants_suspects <- read_delim(calibrants_suspects, show_col_types = FALSE)
}
#************
# CALIBRATION
#************
# 1) Find calibration compounds with concentration and area information from the dataframe
calibrants <- calibrants_suspects %>%
drop_na(conc_M)
# 2) calculcate response factors (slopes of calibration graphs)
suppressMessages(
calibrants <- calibrants %>%
drop_na(SMILES) %>%
group_by(SMILES, identifier) %>%
mutate(IC = isotopedistribution(SMILES),
area_IC = area*IC/100,
slope = linear_regression(area_IC, conc_M)$slope,
retention_time = mean(retention_time),
logRF = log10(slope)) %>%
ungroup()
)
plot_calgraph <- ggplot() +
geom_point(data = calibrants,
mapping = aes(x = conc_M,
y = area_IC)) +
facet_wrap(~ identifier, scales = "free") +
theme_classic()
# 1) Use SMILES of calibrants to calculate structural fingerprints
calibrants_structural_FP <- descriptor_calc(calibrants, type)
# 2) Add eluent composition parameters
calibrants_structural_FP <- add_mobile_phase_composition(calibrants_structural_FP,
eluent = eluent,
organic_modifier = organic_modifier,
pH_aq = pH_aq,
NH4 = NH4)
if(model == "model_PFAS") {
calibrants_structural_FP = calibrants_structural_FP %>%
rename(pH.aq. = pH_aq)
}
# 3) Predict logIE values with MS2Quant for calibrants
calibrants_structural_FP <- calibrants_structural_FP %>%
mutate(pred_logIE = predict(model_here, newdata = calibrants_structural_FP))
# 4) Linear regression between logIE and logRF of calibrants
linmod_calibration <- lm(logRF ~ pred_logIE, data = calibrants_structural_FP)
calibration_plot = ggplot(data = calibrants_structural_FP) +
geom_point(mapping = aes(y = logRF,
x = pred_logIE),
size = 2,
alpha = 0.7,
color = "#515251") +
geom_abline(intercept = linmod_calibration$coefficients[1], slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]+1, slope = linmod_calibration$coefficients[2]) +
geom_abline(intercept = linmod_calibration$coefficients[1]-1, slope = linmod_calibration$coefficients[2]) +
#ylim(c(11, 16)) +
#xlim(c(1, 5)) +
#annotation_logticks() +
xlab(substitute(paste("log", italic("IE"))["predicted"]))  +
ylab(substitute(paste("log", italic("RF"))["measured"])) +
theme_classic() +
theme(aspect.ratio = 1)
linmod_calibration_summary <- summary(linmod_calibration)
#************
# SUSPECTS
#************
# 1) identify the suspects - candidate structures or only area and retention time?
suspects <- calibrants_suspects %>%
filter(is.na(conc_M))
suspects_with_candidate <- suspects %>%
drop_na(SMILES)
suspects_unidentified <- suspects %>%
filter(is.na(SMILES))
# 1) Get fingerprints for suspects
suspects_structural_FP = tibble()
## from structure
if (dim(suspects_with_candidate)[1] > 0) {
suspects_with_candidate <- descriptor_calc(suspects_with_candidate, type)
suppressMessages(
suspects_with_candidate <- suspects_with_candidate %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES)/100) %>%
ungroup())
suspects_structural_FP <- suspects_with_candidate
}
## from SIRIUS results folder
if (fingerprints != "" & type != "PaDEL") {
if (is.character(fingerprints)){
invisible(capture.output(suspects_fingerprints_SIRIUS = suppressMessages(new_readin_FP_function(fingerprints))))
#suspects_fingerprints_SIRIUS <- FpTableForPredictions(fingerprints)
} else {
suspects_fingerprints_SIRIUS <- fingerprints
}
suppressMessages(suspects_unidentified <- suspects_unidentified %>%
left_join(suspects_fingerprints_SIRIUS %>%
filter(case_when(ionization == "esi_pos" ~ (grepl("[M+H]+", predion, fixed = TRUE) | grepl("[M]+", predion, fixed = TRUE)),
ionization == "esi_neg" ~ (grepl("[M-H]-", predion, fixed = TRUE) | grepl("[M]-", predion, fixed = TRUE)),
TRUE ~ grepl("?", predion, fixed = TRUE))) %>%
rename(identifier = id) %>%
mutate(identifier = as.character(identifier))) %>%
group_by(SMILES) %>%
mutate(IC = 1) %>%
ungroup())
if(dim(suspects_structural_FP)[1] > 0) {
suspects_structural_FP <- suspects_structural_FP %>%
bind_rows(suspects_unidentified)
} else {
suspects_structural_FP <- suspects_unidentified
}
} else {
suspects_structural_FP = suspects_structural_FP %>%
bind_rows(suspects_unidentified)
}
# 2) Add eluent composition parameters
suspects_structural_FP <- add_mobile_phase_composition(suspects_structural_FP,
eluent = eluent,
organic_modifier = organic_modifier,
pH_aq = pH_aq,
NH4 = NH4)
# 3) Predict logIE values with MS2Quant for suspects
if(model == "model_PFAS") {
suspects_structural_FP = suspects_structural_FP %>%
rename(pH.aq. = pH_aq)
}
suspects_structural_FP <- suspects_structural_FP %>%
mutate(pred_logIE = predict(model_here, newdata = suspects_structural_FP))
# 4) Convert logIE to logRF values
suspects_structural_FP <- suspects_structural_FP %>%
mutate(logRF_pred = pred_logIE*linmod_calibration$coefficients[2] + linmod_calibration$coefficients[1])
# 5) Calculate concentrations using integrated areas
suspects_concentrations <- suspects_structural_FP %>%
mutate(conc_M = area*IC/10^logRF_pred) %>%
select(identifier, SMILES, area, retention_time, conc_M, logRF_pred)
data_list <-list("calibrants_separate_plots" = plot_calgraph,
"logIE_logRF_calibration_plot" = calibration_plot,
"calibration_linear_model_summary" = linmod_calibration_summary,
"suspects_concentrations" = suspects_concentrations,
"date" = Sys.Date())
return(data_list)
}
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
fingerprints
fingerprints
model = "MS2Quant"
ionization = "esi_neg"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$suspects_concentrations
model = "MS2Quant"
ionization = "esi_neg"
fingerprints = ""
calibrants_suspects
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$suspects_concentrations
fingerprints = path_suspects_sirius_project_folder
model = "PaDEL"
ionization = "esi_neg"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$suspects_concentrations
model = "model_PFAS"
ionization = "esi_neg"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$suspects_concentrations
PFAS_test_quant$logIE_logRF_calibration_plot
model = "MS2Quant"
ionization = "esi_neg"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$logIE_logRF_calibration_plot
model = "MS2Quant"
ionization = "esi_neg"
fingerprints = ""
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$logIE_logRF_calibration_plot
fingerprints = path_suspects_sirius_project_folder
model = "PaDEL"
ionization = "esi_neg"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$logIE_logRF_calibration_plot
fingerprints = ""
model = "PaDEL"
ionization = "esi_neg"
PFAS_test_quant$suspects_concentrations
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$suspects_concentrations
PFAS_test_quant$logIE_logRF_calibration_plot
model = "model_PFAS"
ionization = "esi_neg"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
PFAS_test_quant$suspects_concentrations
PFAS_test_quant$logIE_logRF_calibration_plot
ionization = "esi_pos"
PFAS_test_quant = MS2Quant_quantify(calibrants_suspects,
eluent,
organic_modifier = "MeCN",
pH_aq = 2.7,
NH4 = 0,
model = model,
ionization = ionization,
fingerprints = fingerprints)
remove.packages("MS2Quant")
devtools::install_github("kruvelab/MS2Quant",
ref="changing_models",
INSTALL_opts="--no-multiarch")
devtools::install_github("kruvelab/MS2Quant",
ref="changing_models")
getwd()
devtools::build()
devtools::document()
devtools::build()
getwd()
devtools::document()
devtools::document()
devtools::build()
getwd()
devtools::document()
devtools::build()
getwd()
devtools::document()
devtools::build()
